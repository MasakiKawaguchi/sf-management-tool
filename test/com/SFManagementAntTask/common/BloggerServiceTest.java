package com.SFManagementAntTask.common;

import java.util.ArrayList;
import java.util.List;

import org.junit.Assert;
import org.junit.Test;

import com.SFManagementAntTask.tooling.dao.model.CoverageClass;
import com.SFManagementAntTask.tooling.dao.model.Line;

public class BloggerServiceTest {
	/**
	 * AuthSubController
	 */
	@Test
	public void testOne() {
		CoverageClass cobj = new CoverageClass();
		cobj.setName("BloggerServiceTest");
		ApexClassParser parser = new ApexClassParser(cobj);
		for (String line : createTestData()) {
			parser.execute(line);
		}
		System.out.println(">>> Assert.");
		Integer[] assertrow = { 2, 3, 5, 6, 9, 10, 13, 14, 15, 16, 17, 19, 22, 24, 25, 26, 28, 29, 30, 31, 32, 33, 36, 37, 38, 39, 40, 41, 44, 45, 46, 50, 51, 52, 53, 54 };
		System.out.println(cobj.getCoveredLines().size() + ":" + assertrow.length);
		for (int i = 0; i < cobj.getCoveredLines().size(); i++) {
			Line line = cobj.getCoveredLines().get(i);
			if (i < assertrow.length) {
				System.out.println(line.getNum() + ":" + assertrow[i]);
			} else {
				System.out.println(line.getNum() + ": null");
			}
			Assert.assertTrue(line.getNum() == assertrow[i]);
		}
		Assert.assertEquals("" + cobj.getCoveredLines().get(0).getNum(), "2");
		Assert.assertEquals("" + cobj.getCoveredLines().get(1).getNum(), "3");
		Assert.assertEquals("" + cobj.getCoveredLines().get(2).getNum(), "5");
		Assert.assertEquals("" + cobj.getCoveredLines().get(3).getNum(), "6");
		Assert.assertEquals("" + cobj.getCoveredLines().get(4).getNum(), "9");
		Assert.assertEquals("" + cobj.getCoveredLines().get(5).getNum(), "10");
		Assert.assertEquals("" + cobj.getCoveredLines().get(6).getNum(), "13");
		Assert.assertEquals("" + cobj.getCoveredLines().get(7).getNum(), "14");
		Assert.assertEquals("" + cobj.getCoveredLines().get(8).getNum(), "15");
		Assert.assertEquals("" + cobj.getCoveredLines().get(9).getNum(), "16");
		Assert.assertEquals("" + cobj.getCoveredLines().get(10).getNum(), "17");
		Assert.assertEquals("" + cobj.getCoveredLines().get(11).getNum(), "19");
		Assert.assertEquals("" + cobj.getCoveredLines().get(12).getNum(), "22");
		Assert.assertEquals("" + cobj.getCoveredLines().get(13).getNum(), "24");
		Assert.assertEquals("" + cobj.getCoveredLines().get(14).getNum(), "25");
		Assert.assertEquals("" + cobj.getCoveredLines().get(15).getNum(), "26");
		Assert.assertEquals("" + cobj.getCoveredLines().get(16).getNum(), "28");
		Assert.assertEquals("" + cobj.getCoveredLines().get(17).getNum(), "29");
		Assert.assertEquals("" + cobj.getCoveredLines().get(18).getNum(), "30");
		Assert.assertEquals("" + cobj.getCoveredLines().get(19).getNum(), "31");
		Assert.assertEquals("" + cobj.getCoveredLines().get(20).getNum(), "32");
		Assert.assertEquals("" + cobj.getCoveredLines().get(21).getNum(), "33");
		Assert.assertEquals("" + cobj.getCoveredLines().get(22).getNum(), "36");
		Assert.assertEquals("" + cobj.getCoveredLines().get(23).getNum(), "37");
		Assert.assertEquals("" + cobj.getCoveredLines().get(24).getNum(), "38");
		Assert.assertEquals("" + cobj.getCoveredLines().get(25).getNum(), "39");
		Assert.assertEquals("" + cobj.getCoveredLines().get(26).getNum(), "40");
		Assert.assertEquals("" + cobj.getCoveredLines().get(27).getNum(), "41");
		Assert.assertEquals("" + cobj.getCoveredLines().get(28).getNum(), "44");
		Assert.assertEquals("" + cobj.getCoveredLines().get(29).getNum(), "45");
		Assert.assertEquals("" + cobj.getCoveredLines().get(30).getNum(), "46");
		//cobj.getCoveredLines().get(31).getNum()
		Assert.assertEquals("" + cobj.getCoveredLines().get(32).getNum(), "50");
		Assert.assertEquals("" + cobj.getCoveredLines().get(33).getNum(), "51");
		Assert.assertEquals("" + cobj.getCoveredLines().get(34).getNum(), "52");
		Assert.assertEquals("" + cobj.getCoveredLines().get(35).getNum(), "53");
		Assert.assertEquals("" + cobj.getCoveredLines().get(36).getNum(), "54");
	}

	private List<String> createTestData() {
		List<String> data = new ArrayList<String>();
		data.add("public class BloggerService {");
		data.add("    GoogleService service = new GoogleService('blogger');");
		data.add("    public void setAuthSubToken(string t) { service.AuthSubToken = t;   }");
		data.add("    ");
		data.add("    public GoogleData getFeed(string url) {  ");
		data.add("        return service.getFeed(url); ");
		data.add("    } ");
		data.add("    ");
		data.add("    public void makePostRequest( string editUrl, string body) {");
		data.add("        service.makePostRequest( editUrl, body);");
		data.add("    }");
		data.add("");
		data.add("    public xmldom.element getBlogTitle( string t) { ");
		data.add("        GoogleData feed = service.getFeed( defaultFeed ); ");
		data.add("        for (xmldom.element ee: feed.entries ) { ");
		data.add("            if ( ee.getValue('title').startsWith ( t ) ) {  ");
		data.add("                return ee; ");
		data.add("            }        ");
		data.add("        } return null;");
		data.add("    }");
		data.add("    ");
		data.add("    public xmldom.element makeBlogElement( string title, string authorname, string email) {");
		data.add("        ");
		data.add("        xmldom.element atom = GoogleData.makeElement('entry','');");
		data.add("        GoogleData.addNameSpace(atom);");
		data.add("        GoogleData.addAPINameSpace(atom,'xmlns:app','http://purl.org/atom/app#');");
		data.add("        ");
		data.add("        atom.appendChild( Googledata.createTextNode ( 'title',title) );");
		data.add("        xmldom.element author = GoogleData.makeElement('author','');");
		data.add("        author.appendChild( Googledata.createTextNode ( 'name',authorname) );");
		data.add("        author.appendChild( Googledata.createTextNode ( 'email',email) );");
		data.add("        atom.appendChild( author);");
		data.add("        return atom;");
		data.add("    }");
		data.add("    ");
		data.add("    public xmldom.element setContent (xmldom.element atom, string xhtml ) {");
		data.add("        xmldom content = new xmldom(");
		data.add("            '<content type=\"xhtml\"><div xmlns=\"http://www.w3.org/1999/xhtml\">' +");
		data.add("            xhtml + '</div></content>');");
		data.add("        atom.appendChild( content.getElementByTagName('content') );");
		data.add("        return atom;");
		data.add("    }");
		data.add("    ");
		data.add("    public void insertEntry ( xmldom.element blog, xmldom.element atom ) {");
		data.add("        service.makePostRequest( ");
		data.add("            GoogleData.getRelLink(blog, BloggerService.postUrl) ,"); // 46
		data.add("            atom.toXmlString() ); ");
		data.add("    }");
		data.add("    ");
		data.add("    public void setDraft(  xmldom.element atom ) {");
		data.add("        xmldom.element control = new xmldom.element('app:control');");
		data.add("        control.appendChild( ");
		data.add("         GoogleData.makeElement('app:draft','yes'));");
		data.add("        atom.appendChild( control );    ");
		data.add("    }");
		data.add("    ");
		data.add("    ");
		data.add("    /* ");
		data.add("    Creating comments");
		data.add("    ");
		data.add("    To post a comment, create an Atom <entry> element like the following:");
		data.add("    ");
		data.add("      <entry xmlns='http://www.w3.org/2005/Atom'>");
		data.add("        <title type=\"text\">This is my first comment</title>");
		data.add("        <content type=\"html\">This is my first comment</content>");
		data.add("        <author>");
		data.add("          <name>Blog Author name</name>");
		data.add("        </author>");
		data.add("      </entry>");
		data.add("    ");
		data.add("    to POST http://www.blogger.com/feeds/blogID/postID/comments/default");
		data.add("    ");
		data.add("    */");
		data.add("");
		data.add("    /* ");
		data.add("    Deleting comments");
		data.add("    ");
		data.add("    To delete a comment, send a DELETE request to the comment's edit URL. This URL is highlighted in the comments feed above.");
		data.add("    */");
		data.add("        ");
		data.add("    /* ");
		data.add("        Retrieving posts using query parameters");
		data.add("    ");
		data.add("    The Blogger Data API lets you request a set of entries that match specified criteria, such as requesting blog posts created or updated in a given date range.");
		data.add("    ");
		data.add("    For example, to send a date-range query, add the updated-min and updated-max ");
		data.add("    parameters to the request URL. To get all the blog entries updated from ");
		data.add("    March 16, 2008 to ");
		data.add("    March 24, 2008, send an HTTP request to the blog's feed URL:");
		data.add("        The Blogger Data API supports the following query parameters:");
		data.add("    ");
		data.add("    alt");
		data.add("        The type of feed to return, such as atom (the default) or rss.");
		data.add("    /category");
		data.add("        Specifies categories (also known as labels) to filter the feed results. ");
		data.add("        For example, http://www.blogger.com/feeds/blogID/posts/default/-/Fritz/Laurie ");
		data.add("        returns entries with both the labels Fritz and Laurie.");
		data.add("    max-results");
		data.add("        The maximum number of entries to return.");
		data.add("    orderby");
		data.add("        The order in which to return entries, such as lastmodified (the default), ");
		data.add("        starttime, or updated.");
		data.add("    published-min, published-max");
		data.add("        The bounds on entry publication dates.");
		data.add("    start-index");
		data.add("        The 1-based index of the first result to be retrieved (for paging).");
		data.add("    updated-min, updated-max");
		data.add("        The bounds on entry update dates. These query parameters are ignored ");
		data.add("        unless the orderby parameter is set to updated. ");
		data.add("     */");
		data.add("    ");
		data.add("    /* *******************************");
		data.add("     * ");
		data.add("     * test methods below here ");
		data.add("     */");
		data.add("    public static final string defaultFeed = 'https://www.blogger.com/feeds/default/blogs';");
		data.add("    public static final string postUrl =   'https://schemas.google.com/g/2005#post';");
		data.add("");
		data.add("     ");
		data.add("    //bloggerServieTest");
		data.add("    static final string sessionAuthToken = 'CJ3pqczuBBD5wJOG______8B';");
		data.add("    public static testMethod  void oneblog() {");
		data.add("        BloggerService service = new BloggerService();  ");
		data.add("        service.setAuthSubToken(sessionAuthToken);  ");
		data.add("        ");
		data.add("        xmldom.element oneBlog = service.getBlogTitle( 'testforce' ); ");
		data.add("        oneBlog.dumpAll(); ");
		data.add("        GoogleData posts = service.getFeed( ");
		data.add("            GoogleData.getRelLink(oneBlog, BloggerService.postUrl) );");
		data.add("        ");
		data.add("        system.debug( posts.entries[0].getValue('title') );");
		data.add("        system.debug( posts.entries[0].getValue('content') );");
		data.add("    }");
		data.add("    ");
		data.add("    public static testMethod  void allblogs() {");
		data.add("        BloggerService service = new BloggerService();  ");
		data.add("        service.setAuthSubToken(sessionAuthToken);  ");
		data.add("        ");
		data.add("        GoogleData allBlogs = service.getFeed( BloggerService.defaultFeed  ); ");
		data.add("        allBlogs.dump(); ");
		data.add("        ");
		data.add("        system.debug( allBlogs.entries[0].getValue('id') );");
		data.add("        ");
		data.add("        xmldom.element oneBlog = allBlogs.entries[0];");
		data.add("        ");
		data.add("        string postFeedUrl = GoogleData.getRelLink(oneBlog, BloggerService.postUrl);          ");
		data.add("        GoogleData posts = service.getFeed( postFeedUrl ); ");
		data.add("        posts.dump(); ");
		data.add("        ");
		data.add("        // dump some stuff from the first post in the feed");
		data.add("        system.debug( posts.entries[0].getValue('title') );");
		data.add("        system.debug( posts.entries[0].getValue('content') );");
		data.add("        system.debug( posts.entries[0].getValue('updated') );");
		data.add("");
		data.add("    }  ");
		data.add("    ");
		data.add("    //  Publishing a Google blog post");
		data.add("    public static testMethod  void publishBlogPost() {");
		data.add("        BloggerService service = new BloggerService();  ");
		data.add("        service.setAuthSubToken(sessionAuthToken);  ");
		data.add("");
		data.add("        // get the blog to post into     ");
		data.add("        xmldom.element oneBlog = service.getBlogTitle( 'testforce' ); ");
		data.add("        ");
		data.add("        xmldom.element atom = service.makeBlogElement('Marriage!','Liz','liz@gmail.com');");
		data.add("       ");
		data.add("        service.setContent( atom, ");
		data.add("            '<p>Mr. Darcy has <em>proposed marriage</em> to me!</p>'+");
		data.add("            '<p>He is the last man on earth I would ever desire to marry.</p>'+");
		data.add("            '<p>Whatever shall I do?</p>' );");
		data.add("        ");
		data.add("         service.insertEntry(oneBlog, atom ); ");
		data.add("    }");
		data.add("");
		data.add("     // Creating a draft Google blog post");
		data.add("    public static testMethod  void publishDraftBlogPost() {");
		data.add("        BloggerService service = new BloggerService();  ");
		data.add("        service.setAuthSubToken(sessionAuthToken);  ");
		data.add("");
		data.add("        // blog to post to        ");
		data.add("        xmldom.element oneBlog = service.getBlogTitle( 'testforce' ); ");
		data.add("        ");
		data.add("        xmldom.element atom = service.makeBlogElement('Marriage!','Liz','liz@gmail.com');");
		data.add("        service.setContent( atom, ");
		data.add("            '<p>Mr. Darcy has <em>proposed marriage</em> to me!</p>'+");
		data.add("            '<p>He is the last man on earth I would ever desire to marry.</p>'+");
		data.add("            '<p>Whatever shall I do?</p>' );");
		data.add("    ");
		data.add("        service.setDraft(atom );  // mark this post as draft, not public");
		data.add("        ");
		data.add("        service.insertEntry(oneBlog, atom ); ");
		data.add("    }    ");
		data.add("       ");
		data.add("    public static testMethod  void getFeedQuery() {");
		data.add("        BloggerService service = new BloggerService();  ");
		data.add("        service.setAuthSubToken(sessionAuthToken);  ");
		data.add("");
		data.add("        GoogleData oneBlog = service.getFeed( BloggerService.defaultFeed + '?max-results=1' ); ");
		data.add("        oneBlog.dump(); ");
		data.add("    }");
		data.add("    ");
		data.add("    public static testMethod  void testMakeblogelement() {");
		data.add("        BloggerService service = new BloggerService();  ");
		data.add("        service.setAuthSubToken(sessionAuthToken);  ");
		data.add("        ");
		data.add("        xmldom.element atom = service.makeBlogElement( 'foo','bar','gack' ); ");
		data.add("        service.setContent( atom, ");
		data.add("            '<p>Mr. Darcy has <em>proposed marriage</em> to me!</p>'+");
		data.add("            '<p>He is the last man on earth I would ever desire to marry.</p>'+");
		data.add("            '<p>Whatever shall I do?</p>' );");
		data.add("    }");
		data.add("    ");
		data.add("}");
		return data;
	}
}
